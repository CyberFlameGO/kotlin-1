FILE fqName:<root> fileName:/correctTypeForClassReferenceExpressionInAnnotation.kt
  annotations:
    OptIn(markerClass = [CLASS_REFERENCE 'CLASS IR_EXTERNAL_DECLARATION_STUB ANNOTATION_CLASS name:ExperimentalTypeInference modality:OPEN visibility:public superTypes:[kotlin.Annotation]' type=kotlin.reflect.KClass<kotlin.experimental.ExperimentalTypeInference>])
  FUN name:buildMap2 visibility:public modality:FINAL <K, V> (builderAction:@[ExtensionFunctionType] kotlin.Function1<kotlin.collections.MutableMap<K of <root>.buildMap2, V of <root>.buildMap2>, kotlin.Unit>) returnType:kotlin.collections.Map<K of <root>.buildMap2, V of <root>.buildMap2> [inline]
    annotations:
      Suppress(names = ['INVISIBLE_MEMBER', 'INVISIBLE_REFERENCE'])
      WasExperimental(markerClass = [CLASS_REFERENCE 'CLASS IR_EXTERNAL_DECLARATION_STUB ANNOTATION_CLASS name:ExperimentalStdlibApi modality:OPEN visibility:public superTypes:[kotlin.Annotation]' type=kotlin.reflect.KClass<kotlin.ExperimentalStdlibApi>])
      InlineOnly
    TYPE_PARAMETER name:K index:0 variance: superTypes:[kotlin.Any?] reified:false
    TYPE_PARAMETER name:V index:1 variance: superTypes:[kotlin.Any?] reified:false
    VALUE_PARAMETER name:builderAction index:0 type:@[ExtensionFunctionType] kotlin.Function1<kotlin.collections.MutableMap<K of <root>.buildMap2, V of <root>.buildMap2>, kotlin.Unit>
      annotations:
        BuilderInference
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun buildMap2 <K, V> (builderAction: @[ExtensionFunctionType] kotlin.Function1<kotlin.collections.MutableMap<K of <root>.buildMap2, V of <root>.buildMap2>, kotlin.Unit>): kotlin.collections.Map<K of <root>.buildMap2, V of <root>.buildMap2> [inline] declared in <root>'
        CALL 'public final fun emptyMap <K, V> (): kotlin.collections.Map<K of kotlin.collections.MapsKt.emptyMap, V of kotlin.collections.MapsKt.emptyMap> declared in kotlin.collections.MapsKt' type=kotlin.collections.Map<K of <root>.buildMap2, V of <root>.buildMap2> origin=null
          <K>: K of <root>.buildMap2
          <V>: V of <root>.buildMap2
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public final fun buildMap2 <K, V> (builderAction: @[ExtensionFunctionType] kotlin.Function1<kotlin.collections.MutableMap<K of <root>.buildMap2, V of <root>.buildMap2>, kotlin.Unit>): kotlin.collections.Map<K of <root>.buildMap2, V of <root>.buildMap2> [inline] declared in <root>' type=kotlin.collections.Map<kotlin.String, kotlin.String> origin=null
          <K>: kotlin.String
          <V>: kotlin.String
          builderAction: FUN_EXPR type=@[ExtensionFunctionType] kotlin.Function1<kotlin.collections.MutableMap<kotlin.String, kotlin.String>, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:kotlin.collections.MutableMap<kotlin.String, kotlin.String>) returnType:kotlin.Unit
              $receiver: VALUE_PARAMETER name:$this$buildMap2 type:kotlin.collections.MutableMap<kotlin.String, kotlin.String>
              BLOCK_BODY
                VAR name:replaced type:kotlin.String? [val]
                  CALL 'public abstract fun put (key: K of kotlin.collections.MutableMap, value: V of kotlin.collections.MutableMap): V of kotlin.collections.MutableMap? declared in kotlin.collections.MutableMap' type=kotlin.String? origin=null
                    $this: GET_VAR '$this$buildMap2: kotlin.collections.MutableMap<kotlin.String, kotlin.String> declared in <root>.box.<anonymous>' type=kotlin.collections.MutableMap<kotlin.String, kotlin.String> origin=null
                    key: CONST String type=kotlin.String value="key"
                    value: CONST String type=kotlin.String value="value"
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
                      $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                        arg0: GET_VAR 'val replaced: kotlin.String? [val] declared in <root>.box.<anonymous>' type=kotlin.String? origin=null
                        arg1: CONST Null type=kotlin.Nothing? value=null
                    then: BLOCK type=kotlin.Unit origin=null
                      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
                        STRING_CONCATENATION type=kotlin.String
                          CONST String type=kotlin.String value="Error: "
                          GET_VAR 'val replaced: kotlin.String? [val] declared in <root>.box.<anonymous>' type=kotlin.String? origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
